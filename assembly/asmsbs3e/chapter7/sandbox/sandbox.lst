     1                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     2                                  ; Executable name : sandbox
     3                                  ; Version: 1.0
     4                                  ; Created date: 21.01.2018
     5                                  ; Last update: 21.01.2018
     6                                  ; Author     : @$#1247
     7                                  ; Description: A simple program for change lowercase into uppercase in assembly for Linux, using NASM
     8                                  ;              2.13.01, demonstrating the conversion of binary values 
     9                                  ;              to hexadecimal strings. It acts as a very simple hex 
    10                                  ;              dump utility for file, though without the ASCII 
    11                                  ;              equivalent column 
    12                                  ; Use: ./sandbox < input_file
    13                                  ;
    14                                  ; Build: nasm -f elf -g -F stabs sandbox.asm
    15                                  ;        ld -o filename sandbox.o -melf_i386
    16                                  ;                          
    17                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    18                                  
    19                                  section .data               ; Section for initialised data
    20                                          EOL equ 10          ; Linux EOL character
    21                                          FILLCHR equ 32      ; ASCII space character
    22                                          HBARCHR equ 196     ; Use dash char if won't display
    23                                          STRTROW equ 2       ; Row where the graph begins
    24                                          
    25                                  ; The dataset is just a table of byte-length numbers:
    26 00000000 0947113437121D2412-             Dataset db 9,71,17,52,55,18,29,36,18,68,77,63,58,33,0
    27 00000009 444D3F3A2100       
    28                                          
    29 0000000F 446174612063757272-             Message db "Data current as of 01.02.18"
    30 00000018 656E74206173206F66-
    31 00000021 2030312E30322E3138 
    32                                          MSGLEN equ $-Message
    33                                          ;Clear the terminal and reset the cursor
    34 0000002A 1B5B324A1B5B30313B-             ClrHome db 27, "[2J", 27, "[01;01H"
    35 00000033 303148             
    36                                          CLRLEN  equ $-ClrHome
    37                                          
    38                                  section .bss
    39                                          COLS equ 81               ; Line length + 1 char for EOL
    40                                          ROWS equ 25               ; Number of lines in display
    41 00000000 <res 000007E9>                  VidBuff resb COLS*ROWS    ; Buffer size adapts to R & C
    42                                          
    43                                  section .text
    44                                          
    45                                  global _start
    46                                      
    47                                  %macro ClearTerminal 0
    48                                          pushad
    49                                          mov eax, 4
    50                                          mov ebx, 1
    51                                          mov ecx, ClrHome
    52                                          mov edx CLRLEN
    53                                          int 80h
    54                                          popad
    55                                  %endmacro
    56                                  
    57 00000000 60                      Show:   pushad
    58 00000001 B804000000                      mov eax, 4
    59 00000006 BB01000000                      mov ebx, 1
    60 0000000B B9[00000000]                    mov ecx, VidBuff
    61 00000010 BAE9070000                      mov edx, COLS*ROWS
    62 00000015 CD80                            int 80h
    63 00000017 61                              popad 
    64 00000018 C3                              ret
    65                                          
    66 00000019 50                      ClrVid:  push eax
    67 0000001A 51                               push ecx
    68 0000001B 57                               push edi
    69 0000001C FC                               cld
    70 0000001D B020                             mov al, FILLCHR
    71 0000001F BF[00000000]                     mov edi, VidBuff
    72 00000024 B9E9070000                       mov ecx, COLS*ROWS
    73 00000029 F3AA                             rep stosb
    74                                           
    75 0000002B BF[00000000]                     mov edi, VidBuff   
    76 00000030 4F                               dec edi
    77 00000031 B919000000                       mov ecx, ROWS
    78                                           
    79 00000036 83C751                  ptEOL:  add edi, COLS
    80 00000039 C6070A                          mov byte[edi], EOL 
    81 0000003C 5F                              pop edi
    82 0000003D 59                              pop ecx
    83 0000003E 58                              pop eax
    84 0000003F C3                              ret
    85                                          
    86 00000040 50                      WrtLn:  push eax
    87 00000041 51                              push ecx
    88 00000042 57                              push edi
    89 00000043 FC                              cld
    90 00000044 BF[00000000]                    mov edi, VidBuff
    91 00000049 48                              dec eax
    92 0000004A 4B                              dec ebx
    93 0000004B B451                            mov ah, COLS
    94 0000004D F6E4                            mul ah
    95 0000004F 01C7                            add edi, eax
    96 00000051 01DF                            add edi, ebx
    97 00000053 F3A4                            rep movsb
    98 00000055 5F                              pop edi
    99 00000056 59                              pop ecx
   100 00000057 5B                              pop ebx
   101 00000058 58                              pop eax
   102 00000059 C3                              ret
   103                                  
   104 0000005A 50                      WrtHB:  push eax
   105 0000005B 53                              push ebx
   106 0000005C 51                              push ecx
   107 0000005D 57                              push edi
   108 0000005E FC                              cld
   109 0000005F BF[00000000]                    mov edi, VidBuff
   110 00000064 48                              dec eax
   111 00000065 4B                              dec ebx
   112 00000066 B451                            mov ah, COLS
   113 00000068 F6E4                            mul ah
   114 0000006A 01C7                            add edi, eax
   115 0000006C 01DF                            add edi, ebx
   116 0000006E B0C4                            mov al, HBARCHR
   117 00000070 F3AA                            rep stosb
   118 00000072 5F                              pop edi
   119 00000073 59                              pop ecx
   120 00000074 5B                              pop ebx
   121 00000075 58                              pop eax
   122 00000076 C3                              ret
   123                                          
   124 00000077 50                      Ruler:  push eax
   125 00000078 53                              push ebx
   126 00000079 51                              push ecx
   127 0000007A 57                              push edi
   128 0000007B BF[00000000]                    mov edi, VidBuff
   129 00000080 48                              dec eax
   130 00000081 4B                              dec ebx
   131 00000082 B451                            mov ah, COLS
   132 00000084 F6E4                            mul ah
   133 00000086 01C7                            add edi, eax
   134 00000088 01DF                            add edi, ebx
   135                                          
   136 0000008A B031                            mov al, '1'
   137                                  
   138 0000008C AA                      DoChar: stosb
   139 0000008D 0431                            add al, '1'
   140 0000008F 37                              aaa
   141 00000090 0430                            add al, '0'
   142 00000092 E2F8                            loop DoChar
   143 00000094 5F                              pop edi
   144 00000095 59                              pop ecx
   145 00000096 5B                              pop ebx
   146 00000097 58                              pop eax
   147 00000098 C3                              ret 
   148                                  
   149                                  _start
   150 00000099 90                              nop
   151 0000009A E87AFFFFFF                      call ClrVid
   152 0000009F B801000000                      mov eax, 1
   153 000000A4 BB01000000                      mov ebx, 1
   154 000000A9 B950000000                      mov ecx, COLS-1
   155 000000AE E8C4FFFFFF                      call Ruler
   156                                          
   157 000000B3 BE[00000000]                    mov esi, Dataset
   158 000000B8 BB01000000                      mov ebx, 1
   159 000000BD BD00000000                      mov ebp, 0
   160                                  
   161 000000C2 89E8                    .blast: mov eax, ebp
   162 000000C4 83C002                          add eax, STRTROW
   163 000000C7 8A0C2E                          mov cl, byte[esi+ebp]
   164 000000CA 83F900                          cmp ecx, 0
   165 000000CD 7408                            je .rule2
   166 000000CF E886FFFFFF                      call WrtHB
   167 000000D4 45                              inc ebp
   168 000000D5 EBEB                            jmp .blast
   169                                  
   170 000000D7 89E8                    .rule2: mov eax, ebp
   171 000000D9 83C002                          add eax, STRTROW
   172 000000DC BB01000000                      mov ebx, 1
   173 000000E1 B950000000                      mov ecx, COLS-1
   174 000000E6 E88CFFFFFF                      call Ruler
   175                                          
   176 000000EB BE[0F000000]                    mov esi, Message
   177 000000F0 B91B000000                      mov ecx, MSGLEN
   178 000000F5 BB51000000                      mov ebx, COLS
   179 000000FA 29CB                            sub ebx, ecx
   180 000000FC D1EB                            shr ebx, 1
   181 000000FE B818000000                      mov eax, 24
   182 00000103 E838FFFFFF                      call WrtLn
   183                                          
   184 00000108 E8F3FEFFFF                      call Show
   185                                          
   186 0000010D B801000000              Exit:   mov eax, 1
   187 00000112 BB00000000                      mov ebx, 0
   188 00000117 CD80                            int 80h
   189                                          
